// 阶乘后的零
// 给定一个整数 n，返回 n! 结果尾数中零的数量。

// 示例 1:
// 输入: 3
// 输出: 0
// 解释: 3! = 6, 尾数中没有零。

// 示例 2:
// 输入: 5
// 输出: 1
// 解释: 5! = 120, 尾数中有 1 个零.

/**
 * @param {number} n
 * @return {number}
 */
const trailingZeroes = (n) => {
  let total = 0;
  while (n >= 5) {
    n = Math.floor(n / 5);
    total += n;
  }
  return total;
};

/**
 * 正常计算有可能回超出js 最大安全值（Number.MAX_SAFE_INTEGER）
 *  js 用的是 IEEE 754 双精度浮点，可以安全地表示 [ -2^53+1 , 2^53-1 ] 这个范围、
 *
 * 所以需要找规律 寻找五的倍数 一个五
 * 
 * 在1~9的范围内，选两个数字相乘，只有 2*5=10。所以，一对2和5，贡献一个0。
 * 不限制范围的话，一对2的倍数和5的倍数，贡献一个0
 * 阶乘中，2的倍数肯定比5的倍数多。所以，只需要考虑5的倍数出现了多少次
 * */
